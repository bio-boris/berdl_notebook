name: Build Base Image
on:
  workflow_dispatch:
  push:
    branches: [ "main", "master", "develop" ]
    paths:
      - 'base/**'  # Includes Dockerfile and all other files in base/
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'
  pull_request:
    branches: [ "main", "master", "develop" ]
    paths:
      - 'base/**'
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # AMD64 Build
      - name: Extract Docker metadata for AMD64
        id: meta-amd64
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}_base_amd64

      - name: Build and push AMD64 Docker image
        id: build-and-push-amd64
        uses: docker/build-push-action@v5
        with:
          context: ./base
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta-amd64.outputs.tags }}
          labels: ${{ steps.meta-amd64.outputs.labels }}
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,mode=max,scope=amd64

      # ARM64 Build
      - name: Extract Docker metadata for ARM64
        id: meta-arm64
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}_base_arm64

      - name: Build and push ARM64 Docker image
        id: build-and-push-arm64
        uses: docker/build-push-action@v5
        with:
          context: ./base
          push: true
          platforms: linux/arm64
          tags: ${{ steps.meta-arm64.outputs.tags }}
          labels: ${{ steps.meta-arm64.outputs.labels }}
          cache-from: type=gha,scope=arm64
          cache-to: type=gha,mode=max,scope=arm64

      # Create unified manifest
      - name: Extract metadata for unified manifest
        id: meta-unified
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}_base

      - name: Create and push unified manifest
        run: |
          # Create manifest for each tag
          for tag in ${{ steps.meta-unified.outputs.tags }}; do
            amd64_tag=$(echo "$tag" | sed 's|_base:|_base_amd64:|')
            arm64_tag=$(echo "$tag" | sed 's|_base:|_base_arm64:|')
            
            docker manifest create "$tag" "$amd64_tag" "$arm64_tag"
            docker manifest push "$tag"
          done